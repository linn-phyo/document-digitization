{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/ui/tabs.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,wDACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,wDACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA"}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/ui/tabs.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,oCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,oCACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,oCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,oCACA"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/invoice_listing/invoices-table.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const InvoicesTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call InvoicesTable() from the server but InvoicesTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/invoice_listing/invoices-table.tsx <module evaluation>\",\n    \"InvoicesTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,wEACA"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/invoice_listing/invoices-table.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const InvoicesTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call InvoicesTable() from the server but InvoicesTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/invoice_listing/invoices-table.tsx\",\n    \"InvoicesTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,oDACA"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/hooks/useIndexedDB.ts/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useIndexedDB = registerClientReference(\n    function() { throw new Error(\"Attempted to call useIndexedDB() from the server but useIndexedDB is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/lib/hooks/useIndexedDB.ts <module evaluation>\",\n    \"useIndexedDB\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,2DACA"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/hooks/useIndexedDB.ts/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const useIndexedDB = registerClientReference(\n    function() { throw new Error(\"Attempted to call useIndexedDB() from the server but useIndexedDB is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/lib/hooks/useIndexedDB.ts\",\n    \"useIndexedDB\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,uCACA"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/hooks/useIndexedDB.ts"],"sourcesContent":["\nimport { useCallback, useEffect, useState } from \"react\";\nimport { DBConfig } from \"@/lib/data/dbconfig\";\n\n// Interface defining the return type for useIndexedDB hook\ninterface UseIndexedDBResult {\n  getValue: (tableName: string, id: number) => Promise<any>;\n  getAllValue: (tableName: string) => Promise<any[]>;\n  putValue: (tableName: string, value: object) => Promise<IDBValidKey | null>;\n  putBulkValue: (tableName: string, values: object[]) => Promise<any[]>;\n  updateValue: (params: {\n    tableName: string;\n    id: number;\n    newItem: any;\n  }) => void;\n  deleteValue: (tableName: string, id: number) => number | null;\n  deleteAll: (tableName: string) => void;\n  isDBConnecting: boolean;\n}\n\nexport const useIndexedDB = (\n  databaseName: string,\n  tableNames: string[]\n): UseIndexedDBResult => {\n  const [db, setDB] = useState<IDBDatabase | null>(null);\n  const [isDBConnecting, setIsDBConnecting] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initDB = () => {\n      const request = indexedDB.open(databaseName, DBConfig.version);\n\n      // Handle database upgrade\n      request.onupgradeneeded = () => {\n        const database = request.result;\n        tableNames.forEach((tableName) => {\n          if (!database.objectStoreNames.contains(tableName)) {\n            database.createObjectStore(tableName, {\n              autoIncrement: true,\n              keyPath: \"id\",\n            });\n          }\n        });\n      };\n\n      // Handle successful database connection\n      request.onsuccess = () => {\n        setDB(request.result);\n        setIsDBConnecting(false);\n      };\n\n      // Handle errors in database connection\n      request.onerror = () => {\n        console.error(\"Error initializing IndexedDB:\", request.error);\n        setIsDBConnecting(false);\n      };\n    };\n\n    if (!db) {\n      initDB();\n    }\n  }, [databaseName, tableNames, db]);\n\n  // Helper function to get a transaction for a specific table\n  const getTransaction = (tableName: string, mode: IDBTransactionMode) => {\n    if (!db) throw new Error(\"Database is not initialized\");\n    return db.transaction(tableName, mode).objectStore(tableName);\n  };\n\n  // Function to get a specific value from the table by ID\n  const getValue = useCallback(\n    (tableName: string, id: number): Promise<any> => {\n      return new Promise((resolve, reject) => {\n        try {\n          const store = getTransaction(tableName, \"readonly\");\n          const request = store.get(id);\n          request.onsuccess = () => resolve(request.result);\n          request.onerror = () => reject(request.error);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    },\n    [db]\n  );\n\n  // Function to get all values from a specific table\n  const getAllValue = (tableName: string): Promise<any[]> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readonly\");\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to insert or update a single value in a specific table\n  const putValue = (\n    tableName: string,\n    value: object\n  ): Promise<IDBValidKey | null> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readwrite\");\n        const request = store.put(value);\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to insert or update multiple values in a specific table\n  const putBulkValue = async (\n    tableName: string,\n    values: object[]\n  ): Promise<any[]> => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      values.forEach((value) => store.put(value));\n      return getAllValue(tableName);\n    } catch (error) {\n      throw new Error(\"Bulk insert failed: \" + error);\n    }\n  };\n\n  // Function to update a specific value by ID in a specific table\n  const updateValue = ({\n    tableName,\n    id,\n    newItem,\n  }: {\n    tableName: string;\n    id: number;\n    newItem: any;\n  }) => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      const request = store.get(id);\n      request.onsuccess = () => {\n        const data = request.result;\n        const updatedItem = data ? { ...data, ...newItem } : { id, newItem };\n        store.put(updatedItem);\n      };\n    } catch (error) {\n      console.error(\"Update value failed: \", error);\n    }\n  };\n\n  // Function to delete a specific value by ID from a specific table\n  const deleteValue = (tableName: string, id: number): number | null => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      store.delete(id);\n      return id;\n    } catch (error) {\n      console.error(\"Delete value failed: \", error);\n      return null;\n    }\n  };\n\n  // Function to delete all values from a specific table\n  const deleteAll = (tableName: string) => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      store.clear();\n    } catch (error) {\n      console.error(\"Delete all values failed: \", error);\n    }\n  };\n\n  return {\n    getValue,\n    getAllValue,\n    putValue,\n    putBulkValue,\n    updateValue,\n    deleteValue,\n    deleteAll,\n    isDBConnecting,\n  };\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/data/dbconfig.ts"],"sourcesContent":["export const DBConfig = {\n    name: \"docs_digitization\",\n    version: 1,\n    invoiceTable: \"invoice-table\",\n  };"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACpB,MAAM;IACN,SAAS;IACT,cAAc;AAChB"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/utils/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function ParseAllObjects<T>(json: any): T[] | null {\n  try {\n    const jsonString = JSON.stringify(json);\n    return JSON.parse(jsonString) as T[];\n  } catch (error) {\n    console.error(\"Error parsing JSON:\", error);\n    return null;\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS,gBAAmB,IAAS;IAC1C,IAAI;QACF,MAAM,aAAa,KAAK,SAAS,CAAC;QAClC,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;IACT;AACF"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/invoice_listing/page.tsx"],"sourcesContent":["import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { File, PlusCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n} from '@/components/ui/card';\nimport {\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  Table\n} from '@/components/ui/table';\nimport { ChevronLeft, ChevronRight } from 'lucide-react'; \nimport { InvoicesTable } from './invoices-table';\n\nimport { useIndexedDB } from \"@/lib/hooks/useIndexedDB\";\nimport { DBConfig } from \"@/lib/data/dbconfig\";\n\nimport { Invoice } from '@/lib/models/invoices';\n\nimport { ParseAllObjects } from \"@/lib/utils/utils\"\n \nexport default function DocumentListingPage() { \n\n  const {\n    putValue,\n    getValue,\n    getAllValue,\n    updateValue,\n    deleteValue,\n    isDBConnecting,\n  } = useIndexedDB(DBConfig.name, [DBConfig.invoiceTable]);\n\n  let pageNo = 1;\n  let newOffset = 0;\n  let totalItems = 10;\n\n\n  const invoiceList = ParseAllObjects<Invoice>(getAllValue(DBConfig.invoiceTable));\n\n  return (\n    <div className=\"flex flex-col sm:gap-4 sm:py-4 sm:pl-14\">\n      <header className=\"sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6\">\n      </header>\n      <main className=\"grid flex-1 items-start gap-2 p-4 sm:px-6 sm:py-0 md:gap-4 bg-muted/40\">\n        <Tabs defaultValue=\"all\">\n          <div className=\"flex items-center\">\n          </div>\n          <TabsContent value=\"all\">\n            <InvoicesTable \n            invoices={invoiceList}\n            currentPageNo={pageNo}\n            offset={newOffset*pageNo}\n            totalItems={totalItems}\n            />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n    \n  );\n}\n\n"],"names":[],"mappings":";;;;AAAA;AAmBA;AAEA;AACA;AAIA;;;;;;;AAEe,SAAS;IAEtB,MAAM,EACJ,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,WAAW,EACX,WAAW,EACX,cAAc,EACf,GAAG,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE,uHAAA,CAAA,WAAQ,CAAC,IAAI,EAAE;QAAC,uHAAA,CAAA,WAAQ,CAAC,YAAY;KAAC;IAEvD,IAAI,SAAS;IACb,IAAI,YAAY;IAChB,IAAI,aAAa;IAGjB,MAAM,cAAc,CAAA,GAAA,qHAAA,CAAA,kBAAe,AAAD,EAAW,YAAY,uHAAA,CAAA,WAAQ,CAAC,YAAY;IAE9E,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAO,WAAU;;;;;;0BAElB,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,yHAAA,CAAA,OAAI;oBAAC,cAAa;;sCACjB,8OAAC;4BAAI,WAAU;;;;;;sCAEf,8OAAC,yHAAA,CAAA,cAAW;4BAAC,OAAM;sCACjB,cAAA,8OAAC,4IAAA,CAAA,gBAAa;gCACd,UAAU;gCACV,eAAe;gCACf,QAAQ,YAAU;gCAClB,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQxB"}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/invoice_listing/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}