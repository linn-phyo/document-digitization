{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/utils/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function ParseAllObjects<T>(json: any): T[] | null {\n  try {\n    const jsonString = JSON.stringify(json);\n    return JSON.parse(jsonString) as T[];\n  } catch (error) {\n    console.error(\"Error parsing JSON:\", error);\n    return null!;\n  }\n}\n\nexport const createQueryString = (name: any, value: any) => {\n  const params = new URLSearchParams();\n  params.set(name, value);\n\n  return params.toString();\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS,gBAAmB,IAAS;IAC1C,IAAI;QACF,MAAM,aAAa,KAAK,SAAS,CAAC;QAClC,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;IACT;AACF;KARgB;AAUT,MAAM,oBAAoB,CAAC,MAAW;IAC3C,MAAM,SAAS,IAAI;IACnB,OAAO,GAAG,CAAC,MAAM;IAEjB,OAAO,OAAO,QAAQ;AACxB"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/ui/tooltip.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"],"names":[],"mappings":";;;;;;;AAEA;AAGA;AAFA;AAHA;;;;;AAOA,MAAM,kBAAkB,uKAAiB,QAAQ;AAEjD,MAAM,UAAU,uKAAiB,IAAI;AAErC,MAAM,iBAAiB,uKAAiB,OAAO;AAE/C,MAAM,+BAAiB,8JAAM,UAAU,MAGrC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,6LAAC,uKAAiB,OAAO;QACvB,KAAK;QACL,YAAY;QACZ,WAAW,CAAA,GAAA,wHAAA,CAAA,KAAE,AAAD,EACV,sYACA;QAED,GAAG,KAAK;;;;;;;AAGb,eAAe,WAAW,GAAG,uKAAiB,OAAO,CAAC,WAAW"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/nav-item.tsx"],"sourcesContent":["'use client';\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger\n} from '@/components/ui/tooltip';\nimport clsx from 'clsx';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nexport function NavItem({\n  href,\n  label,\n  children\n}: {\n  href: string;\n  label: string;\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Link\n          href={href}\n          className={clsx(\n            'flex h-9 w-9 items-center justify-center rounded-lg text-muted-foreground transition-colors hover:text-foreground md:h-8 md:w-8',\n            {\n              'bg-accent text-black': pathname === href\n            }\n          )}\n        >\n          {children}\n          <span className=\"sr-only\">{label}</span>\n        </Link>\n      </TooltipTrigger>\n      <TooltipContent side=\"right\">{label}</TooltipContent>\n    </Tooltip>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAKA;AACA;AACA;;;AATA;;;;;AAWO,SAAS,QAAQ,EACtB,IAAI,EACJ,KAAK,EACL,QAAQ,EAKT;;IACC,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAE3B,qBACE,6LAAC,+HAAA,CAAA,UAAO;;0BACN,6LAAC,+HAAA,CAAA,iBAAc;gBAAC,OAAO;0BACrB,cAAA,6LAAC,+HAAA,CAAA,UAAI;oBACH,MAAM;oBACN,WAAW,CAAA,GAAA,wIAAA,CAAA,UAAI,AAAD,EACZ,mIACA;wBACE,wBAAwB,aAAa;oBACvC;;wBAGD;sCACD,6LAAC;4BAAK,WAAU;sCAAW;;;;;;;;;;;;;;;;;0BAG/B,6LAAC,+HAAA,CAAA,iBAAc;gBAAC,MAAK;0BAAS;;;;;;;;;;;;AAGpC;GA9BgB;;QASG,qIAAA,CAAA,cAAW;;;KATd"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/provider/providers.tsx"],"sourcesContent":["'use client';\n\nimport { TooltipProvider } from '@/components/ui/tooltip';\n\nexport default function Providers({ children }: { children: React.ReactNode }) {\n  return <TooltipProvider>{children}</TooltipProvider>;\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,qBAAO,6LAAC,+HAAA,CAAA,kBAAe;kBAAE;;;;;;AAC3B;KAFwB"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/app.slice.ts"],"sourcesContent":["import { asyncThunkCreator, buildCreateSlice } from \"@reduxjs/toolkit\";\n\n// `buildCreateSlice` allows us to create a slice with async thunks.\nexport const createAppSlice = buildCreateSlice({\n  creators: { asyncThunk: asyncThunkCreator },\n});\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,iBAAiB,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE;IAC7C,UAAU;QAAE,YAAY,8LAAA,CAAA,oBAAiB;IAAC;AAC5C"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/data/dbconfig.ts"],"sourcesContent":["export const DBConfig = {\n    name: \"docs_digitization\",\n    version: 1,\n    invoiceTable: \"invoice-table\",\n  };"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACpB,MAAM;IACN,SAAS;IACT,cAAc;AAChB"}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/utils/indexeddb-helper.ts"],"sourcesContent":["\nimport { DBConfig } from \"@/lib/data/dbconfig\";\n\nimport moment from 'moment';\n\n// Interface defining the return type for useIndexedDB hook\ninterface UseIndexedDBResult {\n  initDB: any;\n  getValue: (tableName: string, id: number) => Promise<any>;\n  getValueByFilter: (tableName: string, formData: Date, toDate: Date, type: string, itemType: string) => Promise<any>;\n  getAllValue: (tableName: string) => Promise<any[]>;\n  putValue: (tableName: string, value: object) => Promise<IDBValidKey | null>;\n  putBulkValue: (tableName: string, values: object[]) => Promise<any[]>;\n  updateValue: (tableName: string, id: number, newItem: object) => Promise<IDBValidKey | null>;\n  // updateValue: (params: {\n  //   tableName: string;\n  //   id: number;\n  //   newItem: any;\n  // }) => void;\n  deleteValue: (tableName: string, id: number) => number | null;\n  deleteAll: (tableName: string) => void;\n  isDBConnecting: boolean;\n}\n\nexport const useIndexedDB = (\n  databaseName: string,\n  tableNames: string[]\n): UseIndexedDBResult => {\n    let db: IDBDatabase | null = null;\n    let isDBConnecting: boolean = true;\n\n    const initDB = () => {\n        const request = indexedDB.open(databaseName, DBConfig.version);\n  \n        // Handle database upgrade\n        request.onupgradeneeded = () => {\n          const database = request.result;\n          tableNames.forEach((tableName) => {\n            if (!database.objectStoreNames.contains(tableName)) {\n              let objectStore = database.createObjectStore(tableName, {\n                autoIncrement: true,\n                keyPath: \"id\",\n              });\n\n              objectStore.createIndex(\"imageIndex\", \"filename\", { unique: false });\n              objectStore.createIndex(\"currencyIndex\", \"currency\", { unique: false });\n              // objectStore.createIndex(\"dateIndex\", \"date\", { unique: false });\n              // objectStore.createIndex(\"typeIndex\", \"type\", { unique: false });\n              // objectStore.createIndex(\"itemTypeIndex\", \"item_type\", { unique: false });\n\n            }\n          });\n        };\n  \n        // Handle successful database connection\n        request.onsuccess = () => {\n          console.info(\"Success initializing IndexedDB >> helper\");\n          db = request.result\n          isDBConnecting = false;\n        };\n  \n        // Handle errors in database connection\n        request.onerror = () => {\n          console.error(\"Error initializing IndexedDB:\", request.error);\n          isDBConnecting = false;\n        };\n  };\n\n  if (!db) {\n    initDB();\n  }\n\n  // Helper function to get a transaction for a specific table\n  const getTransaction = (tableName: string, mode: IDBTransactionMode) => {\n    if (!db) throw new Error(\"Database is not initialized\");\n    return db.transaction(tableName, mode).objectStore(tableName);\n  };\n\n  // Function to get a specific value from the table by ID\n  const getValue = (tableName: string, id: number): Promise<any> => {\n      return new Promise((resolve, reject) => {\n        try {\n          const store = getTransaction(tableName, \"readonly\");\n          const request = store.get(id);\n          request.onsuccess = () => resolve(request.result);\n          request.onerror = () => reject(request.error);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n  // Function to get a specific value from the table by Filter\n  const getValueByFilter = (tableName: string, fromDate: Date, toDate: Date, type: string, itemType: string): Promise<any> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readonly\");\n        const request = store.getAll();\n        request.onsuccess = () => {\n          let result = request.result;\n          if(itemType != \"\")\n            result = result.filter(data => (data.item_type == itemType));\n\n          if(type != \"\")\n            result = result.filter(data => (data.type == type));\n\n          if(fromDate != null && toDate == null) {\n            console.log(\"FILTERS >> \", moment(fromDate, \"DD/MM/YYYY hh:mm:ss\").toDate());\n            result = result.filter(data => (moment(data.date).toDate() >= moment(fromDate).toDate()));\n          }\n          else if(fromDate == null && toDate != null)\n            result = result.filter(data => (data.date <= toDate));\n          else if(fromDate != null && toDate != null)\n            result = result.filter(data => (data.date >= fromDate && data.date <= toDate));\n\n          resolve(result);\n        } \n        request.onerror = () => reject(request.error);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to get all values from a specific table\n  const getAllValue = (tableName: string): Promise<any[]> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readonly\");\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to insert or update a single value in a specific table\n  const putValue = (\n    tableName: string,\n    value: object\n  ): Promise<IDBValidKey | null> => {\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readwrite\");\n        const imageIndex = store.index(\"imageIndex\",);\n\n        console.log(\"Find IMG NAME >> \", value.filename);\n        const request = imageIndex.get(value.filename);\n        request.onsuccess = () => {\n          const data = request.result;\n          console.log(\"FOUND >> \", request);\n          if(data) {\n            reject(\"Duplicate Data!\");\n          } else {\n            const requestInsert = store.put(value);\n            requestInsert.onsuccess = () => resolve(requestInsert.result);\n            requestInsert.onerror = () => reject(requestInsert.error);\n          }\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to insert or update multiple values in a specific table\n  const putBulkValue = async (\n    tableName: string,\n    values: object[]\n  ): Promise<any[]> => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      values.forEach((value) => store.put(value));\n      return getAllValue(tableName);\n    } catch (error) {\n      throw new Error(\"Bulk insert failed: \" + error);\n    }\n  };\n\n  // Function to update a specific value by ID in a specific table\n  // const updateValue = ({\n  //   tableName,\n  //   id,\n  //   newItem,\n  // }: {\n  //   tableName: string;\n  //   id: number;\n  //   newItem: any;\n  // }) => {\n  //   try {\n  //     const store = getTransaction(tableName, \"readwrite\");\n  //     const request = store.get(id);\n  //     request.onsuccess = () => {\n  //       const data = request.result;\n  //       const updatedItem = data ? { ...data, ...newItem } : { id, newItem };\n  //       store.put(updatedItem);\n  //     };\n  //   } catch (error) {\n  //     console.error(\"Update value failed: \", error);\n  //   }\n  // };\n\n  const updateValue = async (\n    tableName: string,\n    id: number,\n    newItem: any,\n  ): Promise<IDBValidKey | null> => {\n\n    return new Promise((resolve, reject) => {\n      try {\n        const store = getTransaction(tableName, \"readwrite\");\n        const request = store.get(id);\n        request.onsuccess = () => {\n          const data = request.result;\n          const updatedItem = data ? { ...data, ...newItem } : { id, newItem };\n          \n          const requestUpdate = store.put(updatedItem);\n          requestUpdate.onsuccess = () => resolve(requestUpdate.result);\n          requestUpdate.onerror = () => reject(requestUpdate.error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  // Function to delete a specific value by ID from a specific table\n  const deleteValue = (tableName: string, id: number): number | null => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      console.log(\"DELETE ID >> \", id);\n      store.delete(id);\n      return id;\n    } catch (error) {\n      console.error(\"Delete value failed: \", error);\n      return null;\n    }\n  };\n\n  // Function to delete all values from a specific table\n  const deleteAll = (tableName: string) => {\n    try {\n      const store = getTransaction(tableName, \"readwrite\");\n      store.clear();\n    } catch (error) {\n      console.error(\"Delete all values failed: \", error);\n    }\n  };\n\n  return {\n    initDB,\n    getValue,\n    getValueByFilter,\n    getAllValue,\n    putValue,\n    putBulkValue,\n    updateValue,\n    deleteValue,\n    deleteAll,\n    isDBConnecting,\n  };\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/features/document_ocr/document.slice.ts"],"sourcesContent":["import { createAppSlice } from \"@/lib/app.slice\";\nimport type { AppThunk } from \"@/lib/store\";\nimport { PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport DataInvoice from \"@/lib/data/documents.json\"\n\nimport { useIndexedDB } from \"@/lib/utils/indexeddb-helper\";\nimport { DBConfig } from \"@/lib/data/dbconfig\";\n\nimport { Invoice } from '@/lib/models/invoices';\n\nimport { ParseAllObjects } from \"@/lib/utils/utils\"\n\nimport { JPY_to_USD } from '@/lib/utils/constants';\n\nimport moment from 'moment';\n\nconst dataInvoice = DataInvoice;\n\nexport interface DocumentOCRState {\n  data: any;\n  itemList: any;\n  errorMessage: string;\n  status: \"idle\" | \"loading\" | \"uploaded\" | \"loaded\"  | \"edit\"  | \"deleted\" | \"success\" | \"failed\";\n}\n\nconst initialState: DocumentOCRState = {\n  data: null,\n  itemList: null,\n  errorMessage: \"\",\n  status: \"idle\",\n};\n\nconst {\n    initDB,\n    putValue,\n    getValue,\n    getValueByFilter,\n    getAllValue,\n    updateValue,\n    deleteValue,\n    isDBConnecting,\n} = useIndexedDB(DBConfig.name, [DBConfig.invoiceTable]);\n\nexport const saveData = createAsyncThunk('saveData', async ( formData: any ) => {\n  const response = await putValue(DBConfig.invoiceTable, formData.data);\n  return response;\n});\n\nexport const updateData = createAsyncThunk('updateData', async ( formData: any ) => {\n  const response = await updateValue(DBConfig.invoiceTable, Number(formData.id), formData.data);\n  return response;\n});\n\nexport const getAllInvoices = createAsyncThunk('getAllInvoices', async ( filterDate: any ) => {\n  const response = await getValueByFilter(DBConfig.invoiceTable, filterDate.fromDate, filterDate.toDate, filterDate.type, filterDate.itemType);\n  // const response = await getAllValue(DBConfig.invoiceTable);\n  return response;\n});\n\nexport const getInvoice = createAsyncThunk('getInvoice', async (id: number) => {\n  console.log(\"SELECTED EDIT ITEM in SLICE >>> \", id);\n  const response = await getValue(DBConfig.invoiceTable, Number(id));\n  return response;\n});\n\n// If you are not using async thunks you can use the standalone `createSlice`.\nexport const documentSlice = createAppSlice({\n  name: \"document\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: (create) => ({\n\n    resetStatus: (state) => {\n      \n      state.status = \"idle\";\n      console.log(\"RESET STATUS >> \", state.status);\n    },\n\n    upload: (state, action: PayloadAction< { file: any; filename: \"\"; language: string } >) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      const { file, filename, language } = action.payload;\n      // state.file = file;\n      // state.filename = filename;\n\n      let invoiceData = dataInvoice.find(item => {\n        return item.filename == filename\n       });\n\n      const defaultLanguage = invoiceData.default_language;\n      invoiceData = invoiceData[language == \"\" ? invoiceData.default_language : language];\n      invoiceData.id = 0;\n      invoiceData.file = file;\n      invoiceData.filename = filename;\n      invoiceData.default_language = language == \"\" ? defaultLanguage : language;\n\n      if(invoiceData != null) {\n        invoiceData.date = moment(invoiceData.date, \"DD/MM/YYYY hh:mm:ss\");\n        invoiceData.checkin_time = moment(invoiceData.checkin_time, \"DD/MM/YYYY hh:mm:ss\");\n        invoiceData.checkout_time = moment(invoiceData.checkout_time, \"DD/MM/YYYY hh:mm:ss\");\n      }\n\n      console.log(\"UPLOAD >>\", invoiceData);\n\n      state.data = ParseAllObjects<Invoice>(invoiceData);\n      state.data.amount = state.data.amount = (state.data.default_language == \"en\") ? (state.data.amount.slice(0, 1) + ' ' + (Number(state.data.amount.slice(2, state.data.amount.length).replace(/[\\s,]/g, '')) * JPY_to_USD).toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")) : state.data.amount;\n      state.status = \"uploaded\";\n      \n    },\n\n    deleteByID: (state, action: PayloadAction< { id: number; } >) => {\n\n      if(!isDBConnecting) initDB();\n      \n      const { id } = action.payload;\n      deleteValue(DBConfig.invoiceTable, Number(id));\n      state.itemList = null;\n      state.status = \"deleted\";      \n    },\n\n  }),\n\n  extraReducers(builder) { \n    builder\n      .addCase(saveData.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(saveData.fulfilled, (state, action) => {\n        \n        if(action.payload != null && (action.payload as number) > 0) {\n          state.itemList = null;\n          state.status = \"success\";\n        } else {\n          state.status = \"failed\";\n        }        \n      })\n      .addCase(saveData.rejected, (state, action) => {\n        console.log(\"REJECT with ERROR >> \", action.error.message);\n        state.errorMessage = action.error.message ? action.error.message : \"\";\n        state.status = 'failed';\n      })\n\n      .addCase(updateData.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateData.fulfilled, (state, action) => {\n        \n        console.log(\"UPD PAYLOAD >> \", action.payload);\n        if(action.payload != null && (action.payload as number) > 0) {\n          state.itemList = null;\n          state.status = \"success\";\n        } else {\n          state.status = \"failed\";\n        }        \n      })\n      .addCase(updateData.rejected, (state, action) => {\n        state.status = 'failed';\n        console.log(\"ERROR : \", action.payload);\n      })\n\n      .addCase(getAllInvoices.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getAllInvoices.fulfilled, (state, action) => {\n        \n        if(action.payload) {\n          state.itemList = ParseAllObjects<Invoice>(action.payload);\n          state.status = 'loaded';\n        }\n      })\n      .addCase(getAllInvoices.rejected, (state, action) => {\n        state.status = 'failed';\n      })\n\n      .addCase(getInvoice.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getInvoice.fulfilled, (state, action) => {\n        \n        console.log(\"SELECTED EDIT ITEM in SLICE >>> \", action.payload);\n        if(action.payload) {\n          state.data = ParseAllObjects<Invoice>(action.payload);\n          state.itemList = null;\n          state.status = \"edit\";          \n        }\n      })\n      .addCase(getInvoice.rejected, (state, action) => {\n        state.status = 'failed';\n      });\n  },\n\n  // You can define your selectors here. These selectors receive the slice\n  // state as their first argument.\n  selectors: {\n    selectData: (document) => document.data,\n    selectItemList: (document) => document.itemList,\n    selectErrorMessage: (document) => document.errorMessage,\n    selectStatus: (document) => document.status,\n  },\n});\n\n// Action creators are generated for each case reducer function.\nexport const { upload, deleteByID, resetStatus } = documentSlice.actions;\n\n// Selectors returned by `slice.selectors` take the root state as their first argument.\nexport const { selectErrorMessage, selectData, selectItemList, selectStatus } = documentSlice.selectors;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/features/document_ocr/dashboard.slice.ts"],"sourcesContent":["\nimport { createAppSlice } from \"@/lib/app.slice\";\nimport type { AppThunk } from \"@/lib/store\";\nimport { PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport DataInvoice from \"@/lib/data/documents.json\"\n\nimport { useIndexedDB } from \"@/lib/utils/indexeddb-helper\";\nimport { DBConfig } from \"@/lib/data/dbconfig\";\n\nimport { ParseAllObjects } from \"@/lib/utils/utils\"\n\nimport { Invoice } from '@/lib/models/invoices';\n\nimport moment, { invalid } from 'moment';\n\nexport interface DashboardState {\n  data: any;\n  status: \"idle\" | \"loading\" | \"success\" | \"failed\";\n}\n\nconst initialState: DashboardState = {\n  data: {\n    countMeal: 0,\n    countTransportation: 0,\n    countGeneral: 0,\n    values: [],\n    labels: [],\n  },\n  status: \"idle\",\n};\n\nconst {\n    initDB,\n    putValue,\n    getValue,\n    getValueByFilter,\n    getAllValue,\n    updateValue,\n    deleteValue,\n    isDBConnecting,\n} = useIndexedDB(DBConfig.name, [DBConfig.invoiceTable]);\n\nlet selectedCurrency = \"jpy\";\n\nexport const getDashboardData = createAsyncThunk('getDashboardData', async ( filterData: any ) => {\n  console.log(\"Dashboard Slice\");\n  selectedCurrency = filterData.currency;\n  const response = await getAllValue(DBConfig.invoiceTable);\n  return response;\n});\n\n// If you are not using async thunks you can use the standalone `createSlice`.\nexport const dashboardSlice = createAppSlice({\n  name: \"dashboard\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: (create) => ({\n\n    resetStatus: (state) => {\n      \n      state.status = \"idle\";\n      console.log(\"RESET STATUS IN SLICE >> \", state.status);\n    },\n\n  }),\n\n  extraReducers(builder) { \n    builder\n\n      .addCase(getDashboardData.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getDashboardData.fulfilled, (state, action) => {\n        \n        let totalMeal = 0;\n        let totalTransportation = 0;\n        let totalGeneral = 0;\n\n        let countMeal = 0;\n        let countTransportation = 0;\n        let countGeneral = 0;\n\n        console.log(\"SELECTED CURRENCY >> \", selectedCurrency);\n\n        if(action.payload) {\n          const itemList = ParseAllObjects<Invoice>(action.payload);\n          if(itemList?.length) {\n            itemList?.map((invoice: any) => {\n              if(invoice.item_type == \"meal\") {\n                countMeal++;\n                if(invoice.currency == selectedCurrency) totalMeal = totalMeal + Number(invoice.amount.slice(2, invoice.amount.length).replace(/[\\s,]/g, ''));\n              } else if(invoice.item_type == \"transportation\") {\n                countTransportation++;\n                if(invoice.currency == selectedCurrency) totalTransportation = totalTransportation + Number(invoice.amount.slice(2, invoice.amount.length).replace(/[\\s,]/g, ''));\n              } else if(invoice.item_type == \"expense\") {\n                countGeneral++;\n                if(invoice.currency == selectedCurrency) totalGeneral = totalGeneral + Number(invoice.amount.slice(2, invoice.amount.length).replace(/[\\s,]/g, ''));\n              }\n            });\n          }\n        }\n\n        state.data.labels = [];\n        state.data.values = [];\n\n        state.data.labels.push(\"Transportation\")\n        state.data.values.push(totalTransportation.toFixed(2));\n\n        state.data.labels.push(\"Meal\")\n        state.data.values.push(totalMeal.toFixed(2));\n\n        state.data.labels.push(\"General\")\n        state.data.values.push(totalGeneral.toFixed(2));\n\n        state.data.countMeal = countMeal;\n        state.data.countTransportation = countTransportation;\n        state.data.countGeneral = countGeneral;\n        state.status = 'success';\n      })\n      .addCase(getDashboardData.rejected, (state, action) => {\n        state.status = 'failed';\n      })\n  },\n\n  // You can define your selectors here. These selectors receive the slice\n  // state as their first argument.\n  selectors: {\n    selectData: (dashboard) => dashboard.data,\n    selectStatus: (dashboard) => dashboard.status,\n  },\n});\n\nexport const { resetStatus } = dashboardSlice.actions;\n\n// Selectors returned by `slice.selectors` take the root state as their first argument.\nexport const { selectData, selectStatus } = dashboardSlice.selectors;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 744, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/store.ts"],"sourcesContent":["import type { Action, ThunkAction } from \"@reduxjs/toolkit\";\nimport { combineSlices, configureStore } from \"@reduxjs/toolkit\";\nimport { documentSlice } from \"./features/document_ocr/document.slice\";\nimport { dashboardSlice } from \"./features/document_ocr/dashboard.slice\";\n\n// `combineSlices` automatically combines the reducers using\n// their `reducerPath`s, therefore we no longer need to call `combineReducers`.\nconst rootReducer = combineSlices(documentSlice, dashboardSlice);\n// Infer the `RootState` type from the root reducer\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// `makeStore` encapsulates the store configuration to allow\n// creating unique store instances, which is particularly important for\n// server-side rendering (SSR) scenarios. In SSR, separate store instances\n// are needed for each request to prevent cross-request state pollution.\nexport const makeStore = () => {\n  return configureStore({\n    reducer: rootReducer,   \n    // Adding the api middleware enables caching, invalidation, polling,\n    // and other useful features of `rtk-query`.\n    middleware: (getDefaultMiddleware) => {\n      return getDefaultMiddleware({\n        serializableCheck: false,\n      });\n    },\n  });\n};\n\n// Infer the return type of `makeStore`\nexport type AppStore = ReturnType<typeof makeStore>;\n// Infer the `AppDispatch` type from the store itself\nexport type AppDispatch = AppStore[\"dispatch\"];\nexport type AppThunk<ThunkReturnType = void> = ThunkAction<\n  ThunkReturnType,\n  RootState,\n  unknown,\n  Action\n>;\n"],"names":[],"mappings":";;;AAEA;AACA;AAFA;;;;AAIA,4DAA4D;AAC5D,+EAA+E;AAC/E,MAAM,cAAc,CAAA,GAAA,8LAAA,CAAA,gBAAa,AAAD,EAAE,uJAAA,CAAA,gBAAa,EAAE,wJAAA,CAAA,iBAAc;AAQxD,MAAM,YAAY;IACvB,OAAO,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;QACpB,SAAS;QACT,oEAAoE;QACpE,4CAA4C;QAC5C,YAAY,CAAC;YACX,OAAO,qBAAqB;gBAC1B,mBAAmB;YACrB;QACF;IACF;AACF"}},
    {"offset": {"line": 771, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/provider/store-provider.tsx"],"sourcesContent":["\"use client\";\nimport type { AppStore } from \"@/lib/store\";\nimport { makeStore } from \"@/lib/store\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport type { ReactNode } from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport { Provider } from \"react-redux\";\n\ninterface Props {\n  readonly children: ReactNode;\n}\n\nexport const StoreProvider = ({ children }: Props) => {\n  const storeRef = useRef<AppStore | null>(null);\n\n  if (!storeRef.current) {\n    // Create the store instance the first time this renders\n    storeRef.current = makeStore();\n  }\n\n  useEffect(() => {\n    if (storeRef.current != null) {\n      // configure listeners using the provided defaults\n      // optional, but required for `refetchOnFocus`/`refetchOnReconnect` behaviors\n      const unsubscribe = setupListeners(storeRef.current.dispatch);\n      return unsubscribe;\n    }\n  }, []);\n\n  return <Provider store={storeRef.current}>{children}</Provider>;\n};\n"],"names":[],"mappings":";;;;AAEA;AAGA;AAFA;AAGA;;;AANA;;;;;AAYO,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAAS;;IAC/C,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAmB;IAEzC,IAAI,CAAC,SAAS,OAAO,EAAE;QACrB,wDAAwD;QACxD,SAAS,OAAO,GAAG,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD;IAC7B;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,OAAO,IAAI,MAAM;YAC5B,kDAAkD;YAClD,6EAA6E;YAC7E,MAAM,cAAc,CAAA,GAAA,mLAAA,CAAA,iBAAc,AAAD,EAAE,SAAS,OAAO,CAAC,QAAQ;YAC5D,OAAO;QACT;IACF,GAAG,EAAE;IAEL,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,SAAS,OAAO;kBAAG;;;;;;AAC7C;GAlBa;KAAA"}},
    {"offset": {"line": 823, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 829, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/provider/toast-provider.tsx"],"sourcesContent":["\"use client\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer } from \"react-toastify\";\n\nexport default function ToastProvider() {\n  const contextClass = {\n    success: \"bg-blue-600\",\n    error: \"bg-red-600\",\n    info: \"bg-gray-600\",\n    warning: \"bg-orange-400\",\n    default: \"bg-indigo-600\",\n    dark: \"bg-white-600 font-gray-300\",\n  };\n\n  return (\n    <ToastContainer\n        position=\"top-right\"\n        autoClose={10000}\n    />\n  );\n}"],"names":[],"mappings":";;;;AAGA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,eAAe;QACnB,SAAS;QACT,OAAO;QACP,MAAM;QACN,SAAS;QACT,SAAS;QACT,MAAM;IACR;IAEA,qBACE,6LAAC,sJAAA,CAAA,iBAAc;QACX,UAAS;QACT,WAAW;;;;;;AAGnB;KAhBwB"}},
    {"offset": {"line": 862, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}